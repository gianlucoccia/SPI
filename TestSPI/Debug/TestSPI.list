
TestSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800254c  0800254c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800254c  0800254c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800254c  0800254c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002560  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002560  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008119  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001469  00000000  00000000  00028155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  00029d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b23  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a6a  00000000  00000000  0004ef6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25a3  00000000  00000000  000569d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138f78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  00138fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024f4 	.word	0x080024f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024f4 	.word	0x080024f4

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	spi_dis;
 80001cc:	2201      	movs	r2, #1
 80001ce:	2110      	movs	r1, #16
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d4:	f000 fd92 	bl	8000cfc <HAL_GPIO_WritePin>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fa84 	bl	80006e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f810 	bl	8000200 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f8d8 	bl	8000394 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001e4:	f000 f85e 	bl	80002a4 <MX_SPI1_Init>
	MX_SPI2_Init();
 80001e8:	f000 f89a 	bl	8000320 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_SPI_Receive_IT(&hspi2, &data_get, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	4902      	ldr	r1, [pc, #8]	; (80001f8 <main+0x30>)
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <main+0x34>)
 80001f2:	f001 fc57 	bl	8001aa4 <HAL_SPI_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80001f6:	e7fe      	b.n	80001f6 <main+0x2e>
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	20000028 	.word	0x20000028

08000200 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	; 0x58
 8000204:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2244      	movs	r2, #68	; 0x44
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f968 	bl	80024e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000222:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000226:	f000 fd8f 	bl	8000d48 <HAL_PWREx_ControlVoltageScaling>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000230:	f000 f934 	bl	800049c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800023c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800024e:	230a      	movs	r3, #10
 8000250:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000252:	2307      	movs	r3, #7
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000256:	2302      	movs	r3, #2
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fdc6 	bl	8000df4 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800026e:	f000 f915 	bl	800049c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2104      	movs	r1, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f998 	bl	80015c0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000296:	f000 f901 	bl	800049c <Error_Handler>
	}
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_SPI1_Init+0x74>)
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <MX_SPI1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <MX_SPI1_Init+0x74>)
 80002b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_SPI1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_SPI1_Init+0x74>)
 80002be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002c2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_SPI1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <MX_SPI1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_SPI1_Init+0x74>)
 80002d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_SPI1_Init+0x74>)
 80002da:	2238      	movs	r2, #56	; 0x38
 80002dc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_SPI1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_SPI1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_SPI1_Init+0x74>)
 80002f2:	2207      	movs	r2, #7
 80002f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_SPI1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_SPI1_Init+0x74>)
 80002fe:	2208      	movs	r2, #8
 8000300:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_SPI1_Init+0x74>)
 8000304:	f001 fb2a 	bl	800195c <HAL_SPI_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 800030e:	f000 f8c5 	bl	800049c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000090 	.word	0x20000090
 800031c:	40013000 	.word	0x40013000

08000320 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <MX_SPI2_Init+0x6c>)
 8000326:	4a1a      	ldr	r2, [pc, #104]	; (8000390 <MX_SPI2_Init+0x70>)
 8000328:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_SPI2_Init+0x6c>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <MX_SPI2_Init+0x6c>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_SPI2_Init+0x6c>)
 8000338:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800033c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_SPI2_Init+0x6c>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_SPI2_Init+0x6c>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_SPI2_Init+0x6c>)
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_SPI2_Init+0x6c>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_SPI2_Init+0x6c>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_SPI2_Init+0x6c>)
 8000360:	2200      	movs	r2, #0
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_SPI2_Init+0x6c>)
 8000366:	2207      	movs	r2, #7
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_SPI2_Init+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_SPI2_Init+0x6c>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_SPI2_Init+0x6c>)
 8000378:	f001 faf0 	bl	800195c <HAL_SPI_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_SPI2_Init+0x66>
	{
		Error_Handler();
 8000382:	f000 f88b 	bl	800049c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028
 8000390:	40003800 	.word	0x40003800

08000394 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0304 	and.w	r3, r3, #4
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a24      	ldr	r2, [pc, #144]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a18      	ldr	r2, [pc, #96]	; (8000458 <MX_GPIO_Init+0xc4>)
 80003f8:	f043 0302 	orr.w	r3, r3, #2
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_GPIO_Init+0xc4>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0302 	and.w	r3, r3, #2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2110      	movs	r1, #16
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fc73 	bl	8000cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800041c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000420:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <MX_GPIO_Init+0xc8>)
 800042e:	f000 fabb 	bl	80009a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000432:	2310      	movs	r3, #16
 8000434:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800043e:	2303      	movs	r3, #3
 8000440:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 faac 	bl	80009a8 <HAL_GPIO_Init>

}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	; 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	48000800 	.word	0x48000800

08000460 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi2.Instance)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_SPI_RxCpltCallback+0x34>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	429a      	cmp	r2, r3
 8000472:	d10a      	bne.n	800048a <HAL_SPI_RxCpltCallback+0x2a>
	{
		spi_dis;
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f000 fc3e 	bl	8000cfc <HAL_GPIO_WritePin>
		HAL_SPI_Receive_IT(&hspi2, & data_get, 1);
 8000480:	2201      	movs	r2, #1
 8000482:	4905      	ldr	r1, [pc, #20]	; (8000498 <HAL_SPI_RxCpltCallback+0x38>)
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <HAL_SPI_RxCpltCallback+0x34>)
 8000486:	f001 fb0d 	bl	8001aa4 <HAL_SPI_Receive_IT>
	}
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000028 	.word	0x20000028
 8000498:	2000008c 	.word	0x2000008c

0800049c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6593      	str	r3, [r2, #88]	; 0x58
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 031c 	add.w	r3, r7, #28
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a3d      	ldr	r2, [pc, #244]	; (8000604 <HAL_SPI_MspInit+0x114>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d129      	bne.n	8000566 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000512:	4b3d      	ldr	r3, [pc, #244]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000516:	4a3c      	ldr	r2, [pc, #240]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800051c:	6613      	str	r3, [r2, #96]	; 0x60
 800051e:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b37      	ldr	r3, [pc, #220]	; (8000608 <HAL_SPI_MspInit+0x118>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a36      	ldr	r2, [pc, #216]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b34      	ldr	r3, [pc, #208]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000542:	23e0      	movs	r3, #224	; 0xe0
 8000544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000552:	2305      	movs	r3, #5
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fa22 	bl	80009a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000564:	e049      	b.n	80005fa <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a28      	ldr	r2, [pc, #160]	; (800060c <HAL_SPI_MspInit+0x11c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d144      	bne.n	80005fa <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6593      	str	r3, [r2, #88]	; 0x58
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <HAL_SPI_MspInit+0x118>)
 800057e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_SPI_MspInit+0x118>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <HAL_SPI_MspInit+0x118>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <HAL_SPI_MspInit+0x118>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_SPI_MspInit+0x118>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <HAL_SPI_MspInit+0x118>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_SPI_MspInit+0x118>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b8:	230c      	movs	r3, #12
 80005ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005c8:	2305      	movs	r3, #5
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <HAL_SPI_MspInit+0x120>)
 80005d4:	f000 f9e8 	bl	80009a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ea:	2305      	movs	r3, #5
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <HAL_SPI_MspInit+0x124>)
 80005f6:	f000 f9d7 	bl	80009a8 <HAL_GPIO_Init>
}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	; 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40013000 	.word	0x40013000
 8000608:	40021000 	.word	0x40021000
 800060c:	40003800 	.word	0x40003800
 8000610:	48000800 	.word	0x48000800
 8000614:	48000400 	.word	0x48000400

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f89a 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <SystemInit+0x20>)
 8000672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <SystemInit+0x20>)
 8000678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800067c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff ffea 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f001 feed 	bl	800249c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fd81 	bl	80001c8 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d4:	08002554 	.word	0x08002554
  ldr r2, =_sbss
 80006d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006dc:	200000f8 	.word	0x200000f8

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_Init+0x3c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <HAL_Init+0x3c>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 f920 	bl	8000940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f80f 	bl	8000724 <HAL_InitTick>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e001      	b.n	8000716 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000712:	f7ff fec9 	bl	80004a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000716:	79fb      	ldrb	r3, [r7, #7]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_InitTick+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d023      	beq.n	8000780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_InitTick+0x70>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_InitTick+0x6c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f91d 	bl	800098e <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d809      	bhi.n	8000774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f000 f8f5 	bl	8000956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_InitTick+0x74>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e007      	b.n	8000784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e001      	b.n	8000784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	20000000 	.word	0x20000000
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x20>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_IncTick+0x24>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_IncTick+0x24>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008
 80007c0:	200000f4 	.word	0x200000f4

080007c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_GetTick+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200000f4 	.word	0x200000f4

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	; 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800090c:	d301      	bcc.n	8000912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090e:	2301      	movs	r3, #1
 8000910:	e00f      	b.n	8000932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <SysTick_Config+0x40>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	f7ff ff8e 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <SysTick_Config+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <SysTick_Config+0x40>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff47 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000968:	f7ff ff5c 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800096c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff ff8e 	bl	8000894 <NVIC_EncodePriority>
 8000978:	4602      	mov	r2, r0
 800097a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff5d 	bl	8000840 <__NVIC_SetPriority>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffb0 	bl	80008fc <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e17f      	b.n	8000cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8171 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <HAL_GPIO_Init+0x40>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 0201 	and.w	r2, r3, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d118      	bne.n	8000a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	f003 0201 	and.w	r2, r3, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d017      	beq.n	8000ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d123      	bne.n	8000b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691a      	ldr	r2, [r3, #16]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0203 	and.w	r2, r3, #3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80ac 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a5e      	ldr	r2, [pc, #376]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9c:	d025      	beq.n	8000bea <HAL_GPIO_Init+0x242>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <HAL_GPIO_Init+0x338>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_Init+0x23e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_GPIO_Init+0x33c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x23a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4d      	ldr	r2, [pc, #308]	; (8000ce8 <HAL_GPIO_Init+0x340>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x236>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	; (8000cec <HAL_GPIO_Init+0x344>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x232>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4b      	ldr	r2, [pc, #300]	; (8000cf0 <HAL_GPIO_Init+0x348>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x22e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_GPIO_Init+0x34c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x22a>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e00c      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bea:	2300      	movs	r3, #0
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfc:	4937      	ldr	r1, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c2e:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae78 	bne.w	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	48001000 	.word	0x48001000
 8000cf0:	48001400 	.word	0x48001400
 8000cf4:	48001800 	.word	0x48001800
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d0c:	787b      	ldrb	r3, [r7, #1]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40007000 	.word	0x40007000

08000d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d56:	d130      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d64:	d038      	beq.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2232      	movs	r2, #50	; 0x32
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	0c9b      	lsrs	r3, r3, #18
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8c:	e002      	b.n	8000d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da0:	d102      	bne.n	8000da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f2      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db4:	d110      	bne.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e00f      	b.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc6:	d007      	beq.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40007000 	.word	0x40007000
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e3d4      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e06:	4ba1      	ldr	r3, [pc, #644]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e10:	4b9e      	ldr	r3, [pc, #632]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80e4 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <HAL_RCC_OscConfig+0x4a>
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b0c      	cmp	r3, #12
 8000e32:	f040 808b 	bne.w	8000f4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 8087 	bne.w	8000f4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e3e:	4b93      	ldr	r3, [pc, #588]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x62>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e3ac      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1a      	ldr	r2, [r3, #32]
 8000e5a:	4b8c      	ldr	r3, [pc, #560]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_RCC_OscConfig+0x7c>
 8000e66:	4b89      	ldr	r3, [pc, #548]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e6e:	e005      	b.n	8000e7c <HAL_RCC_OscConfig+0x88>
 8000e70:	4b86      	ldr	r3, [pc, #536]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d223      	bcs.n	8000ec8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd09 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e38d      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e94:	4b7d      	ldr	r3, [pc, #500]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a7c      	ldr	r2, [pc, #496]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b7a      	ldr	r3, [pc, #488]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4977      	ldr	r1, [pc, #476]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	4972      	ldr	r1, [pc, #456]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
 8000ec6:	e025      	b.n	8000f14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec8:	4b70      	ldr	r3, [pc, #448]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6f      	ldr	r2, [pc, #444]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b6d      	ldr	r3, [pc, #436]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	496a      	ldr	r1, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	4965      	ldr	r1, [pc, #404]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fcc9 	bl	800189c <RCC_SetFlashLatencyFromMSIRange>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e34d      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f14:	f000 fc36 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	495a      	ldr	r1, [pc, #360]	; (8001090 <HAL_RCC_OscConfig+0x29c>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	4a58      	ldr	r2, [pc, #352]	; (8001094 <HAL_RCC_OscConfig+0x2a0>)
 8000f32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f34:	4b58      	ldr	r3, [pc, #352]	; (8001098 <HAL_RCC_OscConfig+0x2a4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fbf3 	bl	8000724 <HAL_InitTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d052      	beq.n	8000fee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	e331      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d032      	beq.n	8000fba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f54:	4b4d      	ldr	r3, [pc, #308]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc30 	bl	80007c4 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc2c 	bl	80007c4 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e31a      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f7a:	4b44      	ldr	r3, [pc, #272]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	493b      	ldr	r1, [pc, #236]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	4936      	ldr	r1, [pc, #216]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e01a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fbfd 	bl	80007c4 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fce:	f7ff fbf9 	bl	80007c4 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e2e7      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x1da>
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d074      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x21a>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b0c      	cmp	r3, #12
 8001006:	d10e      	bne.n	8001026 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d064      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2f0>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d160      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e2c4      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x24a>
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e01d      	b.n	800107a <HAL_RCC_OscConfig+0x286>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001046:	d10c      	bne.n	8001062 <HAL_RCC_OscConfig+0x26e>
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_RCC_OscConfig+0x298>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_RCC_OscConfig+0x298>)
 800104e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_RCC_OscConfig+0x298>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e00b      	b.n	800107a <HAL_RCC_OscConfig+0x286>
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_RCC_OscConfig+0x298>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01c      	beq.n	80010bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fb9f 	bl	80007c4 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001088:	e011      	b.n	80010ae <HAL_RCC_OscConfig+0x2ba>
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	0800250c 	.word	0x0800250c
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fb92 	bl	80007c4 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e280      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ae:	4baf      	ldr	r3, [pc, #700]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x2a8>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb82 	bl	80007c4 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fb7e 	bl	80007c4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e26c      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010d6:	4ba5      	ldr	r3, [pc, #660]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2d0>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d060      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x310>
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	d119      	bne.n	8001132 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d116      	bne.n	8001132 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	4b99      	ldr	r3, [pc, #612]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_OscConfig+0x328>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e249      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b93      	ldr	r3, [pc, #588]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	4990      	ldr	r1, [pc, #576]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	e040      	b.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d023      	beq.n	8001182 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113a:	4b8c      	ldr	r3, [pc, #560]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8b      	ldr	r2, [pc, #556]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001146:	f7ff fb3d 	bl	80007c4 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fb39 	bl	80007c4 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e227      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001160:	4b82      	ldr	r3, [pc, #520]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b7f      	ldr	r3, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	497c      	ldr	r1, [pc, #496]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	e018      	b.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001182:	4b7a      	ldr	r3, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a79      	ldr	r2, [pc, #484]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fb19 	bl	80007c4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fb15 	bl	80007c4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e203      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a8:	4b70      	ldr	r3, [pc, #448]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d03c      	beq.n	800123a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01c      	beq.n	8001202 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80011ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ce:	4a67      	ldr	r2, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d8:	f7ff faf4 	bl	80007c4 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff faf0 	bl	80007c4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1de      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f2:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ef      	beq.n	80011e0 <HAL_RCC_OscConfig+0x3ec>
 8001200:	e01b      	b.n	800123a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fad7 	bl	80007c4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fad3 	bl	80007c4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1c1      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ef      	bne.n	800121a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80a6 	beq.w	8001394 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10d      	bne.n	8001274 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6593      	str	r3, [r2, #88]	; 0x58
 8001264:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001270:	2301      	movs	r3, #1
 8001272:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_RCC_OscConfig+0x57c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d118      	bne.n	80012b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_RCC_OscConfig+0x57c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a3a      	ldr	r2, [pc, #232]	; (8001370 <HAL_RCC_OscConfig+0x57c>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128c:	f7ff fa9a 	bl	80007c4 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001294:	f7ff fa96 	bl	80007c4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e184      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_RCC_OscConfig+0x57c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x4d8>
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c0:	4a2a      	ldr	r2, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ca:	e024      	b.n	8001316 <HAL_RCC_OscConfig+0x522>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d110      	bne.n	80012f6 <HAL_RCC_OscConfig+0x502>
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f4:	e00f      	b.n	8001316 <HAL_RCC_OscConfig+0x522>
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x578>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_RCC_OscConfig+0x578>)
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d016      	beq.n	800134c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff fa51 	bl	80007c4 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fa4d 	bl	80007c4 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e139      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x578>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0ed      	beq.n	8001326 <HAL_RCC_OscConfig+0x532>
 800134a:	e01a      	b.n	8001382 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fa3a 	bl	80007c4 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001352:	e00f      	b.n	8001374 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff fa36 	bl	80007c4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d906      	bls.n	8001374 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e122      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001374:	4b90      	ldr	r3, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e8      	bne.n	8001354 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001388:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a8a      	ldr	r2, [pc, #552]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800138e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8108 	beq.w	80015ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	f040 80d0 	bne.w	8001548 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013a8:	4b83      	ldr	r3, [pc, #524]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d130      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	3b01      	subs	r3, #1
 80013c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d127      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d11f      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013e8:	2a07      	cmp	r2, #7
 80013ea:	bf14      	ite	ne
 80013ec:	2201      	movne	r2, #1
 80013ee:	2200      	moveq	r2, #0
 80013f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d113      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	3b01      	subs	r3, #1
 8001404:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d109      	bne.n	800141e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d06e      	beq.n	80014fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d069      	beq.n	80014f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001424:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001430:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b7      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001440:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5c      	ldr	r2, [pc, #368]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800144c:	f7ff f9ba 	bl	80007c4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff f9b6 	bl	80007c4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0a4      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_RCC_OscConfig+0x7c8>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001482:	3a01      	subs	r2, #1
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800148c:	0212      	lsls	r2, r2, #8
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001494:	0852      	lsrs	r2, r2, #1
 8001496:	3a01      	subs	r2, #1
 8001498:	0552      	lsls	r2, r2, #21
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a0:	0852      	lsrs	r2, r2, #1
 80014a2:	3a01      	subs	r2, #1
 80014a4:	0652      	lsls	r2, r2, #25
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ac:	0912      	lsrs	r2, r2, #4
 80014ae:	0452      	lsls	r2, r2, #17
 80014b0:	430a      	orrs	r2, r1
 80014b2:	4941      	ldr	r1, [pc, #260]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d0:	f7ff f978 	bl	80007c4 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff f974 	bl	80007c4 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e062      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f6:	e05a      	b.n	80015ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e059      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d152      	bne.n	80015ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800150e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001520:	f7ff f950 	bl	80007c4 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff f94c 	bl	80007c4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e03a      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x734>
 8001546:	e032      	b.n	80015ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d02d      	beq.n	80015aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001558:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 8001578:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800157c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001580:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff f91f 	bl	80007c4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f91b 	bl	80007c4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e009      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_RCC_OscConfig+0x7c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x796>
 80015a8:	e001      	b.n	80015ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	f99d808c 	.word	0xf99d808c

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0c8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d910      	bls.n	8001604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 0207 	bic.w	r2, r3, #7
 80015ea:	4961      	ldr	r1, [pc, #388]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b0      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d04c      	beq.n	80016aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d121      	bne.n	8001668 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e09e      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d107      	bne.n	8001640 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d115      	bne.n	8001668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e092      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001648:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e086      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e07e      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 0203 	bic.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	493f      	ldr	r1, [pc, #252]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800167a:	f7ff f8a3 	bl	80007c4 <HAL_GetTick>
 800167e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001680:	e00a      	b.n	8001698 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7ff f89f 	bl	80007c4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e066      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 020c 	and.w	r2, r3, #12
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d1eb      	bne.n	8001682 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	492c      	ldr	r1, [pc, #176]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d210      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4924      	ldr	r1, [pc, #144]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e036      	b.n	8001766 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4918      	ldr	r1, [pc, #96]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4910      	ldr	r1, [pc, #64]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001736:	f000 f825 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ffe2 	bl	8000724 <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	72fb      	strb	r3, [r7, #11]

  return status;
 8001764:	7afb      	ldrb	r3, [r7, #11]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	0800250c 	.word	0x0800250c
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d121      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d11e      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e005      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017e0:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	e004      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d101      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 800180a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d134      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0xa6>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d003      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0xac>
 8001828:	e005      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 800182c:	617b      	str	r3, [r7, #20]
      break;
 800182e:	e005      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 8001832:	617b      	str	r3, [r7, #20]
      break;
 8001834:	e002      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	3301      	adds	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	fb02 f203 	mul.w	r2, r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	0e5b      	lsrs	r3, r3, #25
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	3301      	adds	r3, #1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800187c:	69bb      	ldr	r3, [r7, #24]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	0800251c 	.word	0x0800251c
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018b4:	f7ff fa3a 	bl	8000d2c <HAL_PWREx_GetVoltageRange>
 80018b8:	6178      	str	r0, [r7, #20]
 80018ba:	e014      	b.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a24      	ldr	r2, [pc, #144]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018d4:	f7ff fa2a 	bl	8000d2c <HAL_PWREx_GetVoltageRange>
 80018d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ec:	d10b      	bne.n	8001906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d919      	bls.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2ba0      	cmp	r3, #160	; 0xa0
 80018f8:	d902      	bls.n	8001900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fa:	2302      	movs	r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e013      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e010      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b80      	cmp	r3, #128	; 0x80
 800190a:	d902      	bls.n	8001912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800190c:	2303      	movs	r3, #3
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	e00a      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d102      	bne.n	800191e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e004      	b.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b70      	cmp	r3, #112	; 0x70
 8001922:	d101      	bne.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001924:	2301      	movs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0207 	bic.w	r2, r3, #7
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e095      	b.n	8001a9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800197e:	d009      	beq.n	8001994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
 8001986:	e005      	b.n	8001994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7fe fd9e 	bl	80004f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019d4:	d902      	bls.n	80019dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e002      	b.n	80019e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80019ea:	d007      	beq.n	80019fc <HAL_SPI_Init+0xa0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019f4:	d002      	beq.n	80019fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	ea42 0103 	orr.w	r1, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	f003 0204 	and.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a78:	ea42 0103 	orr.w	r1, r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d110      	bne.n	8001ae0 <HAL_SPI_Receive_IT+0x3c>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2204      	movs	r2, #4
 8001acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f894 	bl	8001c04 <HAL_SPI_TransmitReceive_IT>
 8001adc:	4603      	mov	r3, r0
 8001ade:	e089      	b.n	8001bf4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_SPI_Receive_IT+0x4a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e082      	b.n	8001bf4 <HAL_SPI_Receive_IT+0x150>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d002      	beq.n	8001b08 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
 8001b04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b06:	e070      	b.n	8001bea <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Receive_IT+0x70>
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b18:	e067      	b.n	8001bea <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b5e:	d90b      	bls.n	8001b78 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_SPI_Receive_IT+0x158>)
 8001b74:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b76:	e00a      	b.n	8001b8e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b86:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_SPI_Receive_IT+0x15c>)
 8001b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b96:	d10f      	bne.n	8001bb8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bb6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001bc6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d008      	beq.n	8001be8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e000      	b.n	8001bea <HAL_SPI_Receive_IT+0x146>
  }

error :
 8001be8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08001ff3 	.word	0x08001ff3
 8001c00:	08001fa3 	.word	0x08001fa3

08001c04 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_SPI_TransmitReceive_IT+0x20>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e091      	b.n	8001d48 <HAL_SPI_TransmitReceive_IT+0x144>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c3a:	7dbb      	ldrb	r3, [r7, #22]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d00d      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c46:	d106      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_SPI_TransmitReceive_IT+0x52>
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c5a:	e070      	b.n	8001d3e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c72:	e064      	b.n	8001d3e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d003      	beq.n	8001c88 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2205      	movs	r2, #5
 8001c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	887a      	ldrh	r2, [r7, #2]
 8001c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cbe:	d906      	bls.n	8001cce <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_SPI_TransmitReceive_IT+0x150>)
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_SPI_TransmitReceive_IT+0x154>)
 8001cca:	651a      	str	r2, [r3, #80]	; 0x50
 8001ccc:	e005      	b.n	8001cda <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_SPI_TransmitReceive_IT+0x158>)
 8001cd2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8001cd8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ce2:	d802      	bhi.n	8001cea <HAL_SPI_TransmitReceive_IT+0xe6>
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d908      	bls.n	8001cfc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	e007      	b.n	8001d0c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d0a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d008      	beq.n	8001d3c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e000      	b.n	8001d3e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8001d3c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	08001edd 	.word	0x08001edd
 8001d58:	08001f43 	.word	0x08001f43
 8001d5c:	08001d8d 	.word	0x08001d8d
 8001d60:	08001e4b 	.word	0x08001e4b

08001d64 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d923      	bls.n	8001de8 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	b292      	uxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	1c9a      	adds	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b02      	subs	r3, #2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d11f      	bne.n	8001e16 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	e016      	b.n	8001e16 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f103 020c 	add.w	r2, r3, #12
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e30:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fabb 	bl	80023b8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d912      	bls.n	8001e82 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	1c9a      	adds	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b02      	subs	r3, #2
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e80:	e012      	b.n	8001ea8 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d110      	bne.n	8001ed4 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa72 	bl	80023b8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	1c9a      	adds	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f28:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fa3f 	bl	80023b8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d110      	bne.n	8001f9a <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f86:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa0f 	bl	80023b8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f103 020c 	add.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fa29 	bl	800243c <SPI_CloseRx_ISR>
  }
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	b292      	uxth	r2, r2
 8002006:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fa03 	bl	800243c <SPI_CloseRx_ISR>
  }
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002050:	f7fe fbb8 	bl	80007c4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002060:	f7fe fbb0 	bl	80007c4 <HAL_GetTick>
 8002064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	0d1b      	lsrs	r3, r3, #20
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002076:	e054      	b.n	8002122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207e:	d050      	beq.n	8002122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002080:	f7fe fba0 	bl	80007c4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d13d      	bne.n	8002112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ae:	d111      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b8:	d004      	beq.n	80020c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d107      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020dc:	d10f      	bne.n	80020fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e017      	b.n	8002142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3b01      	subs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d19b      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000000 	.word	0x20000000

08002150 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002162:	f7fe fb2f 	bl	80007c4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	4413      	add	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002172:	f7fe fb27 	bl	80007c4 <HAL_GetTick>
 8002176:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	330c      	adds	r3, #12
 800217e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002198:	e060      	b.n	800225c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021a0:	d107      	bne.n	80021b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b8:	d050      	beq.n	800225c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021ba:	f7fe fb03 	bl	80007c4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d902      	bls.n	80021d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d13d      	bne.n	800224c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e8:	d111      	bne.n	800220e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f2:	d004      	beq.n	80021fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d107      	bne.n	800220e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002216:	d10f      	bne.n	8002238 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e010      	b.n	800226e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3b01      	subs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d196      	bne.n	800219a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000

0800227c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002290:	d111      	bne.n	80022b6 <SPI_EndRxTransaction+0x3a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229a:	d004      	beq.n	80022a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a4:	d107      	bne.n	80022b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff febd 	bl	8002040 <SPI_WaitFlagStateUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e023      	b.n	8002324 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e4:	d11d      	bne.n	8002322 <SPI_EndRxTransaction+0xa6>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ee:	d004      	beq.n	80022fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d113      	bne.n	8002322 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff22 	bl	8002150 <SPI_WaitFifoStateUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e000      	b.n	8002324 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff ff03 	bl	8002150 <SPI_WaitFifoStateUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e027      	b.n	80023b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fe68 	bl	8002040 <SPI_WaitFlagStateUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e014      	b.n	80023b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fedc 	bl	8002150 <SPI_WaitFifoStateUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e000      	b.n	80023b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023c0:	f7fe fa00 	bl	80007c4 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0220 	bic.w	r2, r2, #32
 80023d4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	2164      	movs	r1, #100	; 0x64
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa6 	bl	800232c <SPI_EndRxTxTransaction>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe f826 	bl	8000460 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002414:	e00e      	b.n	8002434 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fca0 	bl	8001d64 <HAL_SPI_TxRxCpltCallback>
}
 8002424:	e006      	b.n	8002434 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fca2 	bl	8001d78 <HAL_SPI_ErrorCallback>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002452:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002454:	f7fe f9b6 	bl	80007c4 <HAL_GetTick>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	2164      	movs	r1, #100	; 0x64
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff0c 	bl	800227c <SPI_EndRxTransaction>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	f043 0220 	orr.w	r2, r3, #32
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fd ffea 	bl	8000460 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800248c:	e002      	b.n	8002494 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fc72 	bl	8001d78 <HAL_SPI_ErrorCallback>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <__libc_init_array>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	4d0d      	ldr	r5, [pc, #52]	; (80024d4 <__libc_init_array+0x38>)
 80024a0:	4c0d      	ldr	r4, [pc, #52]	; (80024d8 <__libc_init_array+0x3c>)
 80024a2:	1b64      	subs	r4, r4, r5
 80024a4:	10a4      	asrs	r4, r4, #2
 80024a6:	2600      	movs	r6, #0
 80024a8:	42a6      	cmp	r6, r4
 80024aa:	d109      	bne.n	80024c0 <__libc_init_array+0x24>
 80024ac:	4d0b      	ldr	r5, [pc, #44]	; (80024dc <__libc_init_array+0x40>)
 80024ae:	4c0c      	ldr	r4, [pc, #48]	; (80024e0 <__libc_init_array+0x44>)
 80024b0:	f000 f820 	bl	80024f4 <_init>
 80024b4:	1b64      	subs	r4, r4, r5
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	2600      	movs	r6, #0
 80024ba:	42a6      	cmp	r6, r4
 80024bc:	d105      	bne.n	80024ca <__libc_init_array+0x2e>
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c4:	4798      	blx	r3
 80024c6:	3601      	adds	r6, #1
 80024c8:	e7ee      	b.n	80024a8 <__libc_init_array+0xc>
 80024ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ce:	4798      	blx	r3
 80024d0:	3601      	adds	r6, #1
 80024d2:	e7f2      	b.n	80024ba <__libc_init_array+0x1e>
 80024d4:	0800254c 	.word	0x0800254c
 80024d8:	0800254c 	.word	0x0800254c
 80024dc:	0800254c 	.word	0x0800254c
 80024e0:	08002550 	.word	0x08002550

080024e4 <memset>:
 80024e4:	4402      	add	r2, r0
 80024e6:	4603      	mov	r3, r0
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d100      	bne.n	80024ee <memset+0xa>
 80024ec:	4770      	bx	lr
 80024ee:	f803 1b01 	strb.w	r1, [r3], #1
 80024f2:	e7f9      	b.n	80024e8 <memset+0x4>

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
